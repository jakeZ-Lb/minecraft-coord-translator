{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Field","onChangeCallback","value","cart","TextField","label","type","onChange","event","target","InputLabelProps","shrink","variant","ROField","InputProps","readOnly","App","coords","x","y","z","useState","originCoords","setOriginCoords","currentCoords","setCurrentCoords","oldEntity","setOldEntity","rotation","setRotation","finishedCoords","setFinishedCoords","pasteInput","setpasteInput","useEffect","console","log","ox","oz","oy","cx","cz","cy","ex","ez","ey","allNums","matchAll","length","Number","Box","m","Grid","container","direction","spacing","justifz","alignItems","item","xs","id","e","placeholder","helperText","fullWidth","margin","FormControl","InputLabel","Select","MenuItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0b3c53a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { useState, useEffect } from 'react';\r\n\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { Container, Button, TextField, Grid, Box, FormControl, InputLabel, Select, MenuItem, Icon } from '@material-ui/core'\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nconst Field = ({ onChangeCallback, value, cart }) => {\r\n\r\n\r\n\r\n  return (\r\n    <TextField\r\n\r\n      label={cart}\r\n      type=\"number\"\r\n      value={value}\r\n      onChange={(event) => onChangeCallback(event.target.value)}\r\n      InputLabelProps={{\r\n        shrink: true,\r\n      }}\r\n      variant=\"outlined\"\r\n    />\r\n  )\r\n}\r\n\r\nconst ROField = ({ cart, value }) => {\r\n  return (\r\n    <TextField\r\n\r\n      label={cart}\r\n      value={value}\r\n      InputProps={{\r\n        readOnly: true,\r\n      }}\r\n      variant=\"outlined\"\r\n    />)\r\n}\r\n\r\nfunction App() {\r\n\r\n  let coords = { x: 0, y: 0, z: 0 }\r\n\r\n  const [originCoords, setOriginCoords] = useState(coords)\r\n  const [currentCoords, setCurrentCoords] = useState(coords)\r\n  const [oldEntity, setOldEntity] = useState(coords)\r\n\r\n  const [rotation, setRotation] = useState(0)\r\n\r\n\r\n  const [finishedCoords, setFinishedCoords] = useState(coords)\r\n  const [pasteInput, setpasteInput] = useState(\"\")\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    console.log(rotation)\r\n\r\n    let ox = originCoords.x\r\n    let oz = originCoords.z\r\n    let oy = originCoords.y\r\n\r\n    let cx = currentCoords.x\r\n    let cz = currentCoords.z\r\n    let cy = currentCoords.y\r\n\r\n    let ex = oldEntity.x\r\n    let ez = oldEntity.z\r\n    let ey = oldEntity.y\r\n\r\n\r\n    let x, z, y = 0\r\n    switch (rotation) {\r\n      case 0:\r\n        x = ex + (cx - ox)\r\n        z = ez + (cz - oz)\r\n        y = ey + (cy - oy)\r\n\r\n\r\n        break;\r\n\r\n      case 90:\r\n        x = (ez - oz) + (cz - oz)\r\n        z = (-1 * (ex - ox)) + (cx - ox)\r\n        y = ey + (cy - oy)\r\n\r\n        break;\r\n\r\n      case 180:\r\n        x = (-1 * (ex - ox)) + (cx - ox)\r\n        z = (-1 * (ez - oz)) + (cz - oz)\r\n        y = ey + (cy - oy)\r\n\r\n        break;\r\n\r\n      case 270:\r\n\r\n        x = (-1 * (ez - oz)) + (cz - oz)\r\n        z = (ex - ox) + (cx - ox)\r\n        y = ey + (cy - oy)\r\n\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    setFinishedCoords({ x, z, y })\r\n\r\n  }, [originCoords, currentCoords, oldEntity, rotation])\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    setCurrentCoords({ x: originCoords.x, z: originCoords.z, y: originCoords.y })\r\n  }, [originCoords])\r\n\r\n  useEffect(() => {\r\n    setCurrentCoords({ x: originCoords.x, z: originCoords.z, y: originCoords.y })\r\n  }, [originCoords])\r\n\r\n  useEffect(() => {\r\n    const reg = /-?\\d+\\.?\\d+?/g\r\n\r\n    \r\n\r\n\r\n    if (pasteInput) {\r\n      const allNums = [...pasteInput.matchAll(reg)]\r\n\r\n      if (allNums?.length > 2) {\r\n        setOldEntity({ x: Number(allNums[0]), y: Number(allNums[1]), z: Number(allNums[2]) })\r\n      }\r\n    }\r\n  }, [pasteInput])\r\n\r\n  const parsePaste = (e) => {\r\n    setpasteInput(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <Box m={8}>\r\n      <Grid container direction=\"column\" spacing={3} justifz=\"center\" alignItems=\"center\">\r\n        Original Origin Point\r\n        <Grid item xs={\"auto\"}>\r\n\r\n          <Field value={originCoords.x} cart='X' onChangeCallback={(value) => setOriginCoords({ ...originCoords, x: Number(value) })} />\r\n          <Field value={originCoords.y} cart='y' onChangeCallback={(value) => setOriginCoords({ ...originCoords, y: Number(value) })} />\r\n          <Field value={originCoords.z} cart='z' onChangeCallback={(value) => setOriginCoords({ ...originCoords, z: Number(value) })} />\r\n\r\n        </Grid>\r\n        New Origin Point\r\n        <Grid item xs={\"auto\"}>\r\n          <Field value={currentCoords.x} cart='X' onChangeCallback={(value) => setCurrentCoords({ ...currentCoords, x: Number(value) })} />\r\n          <Field value={currentCoords.y} cart='y' onChangeCallback={(value) => setCurrentCoords({ ...currentCoords, y: Number(value) })} />\r\n          <Field value={currentCoords.z} cart='z' onChangeCallback={(value) => setCurrentCoords({ ...currentCoords, z: Number(value) })} />\r\n        </Grid>\r\n\r\n        Old Entity Point\r\n        <Grid item xs={\"auto\"}>\r\n          <Field value={oldEntity.x} cart='X' onChangeCallback={(value) => setOldEntity({ ...oldEntity, x: Number(value) })} />\r\n\r\n          <Field value={oldEntity.y} cart='y' onChangeCallback={(value) => setOldEntity({ ...oldEntity, y: Number(value) })} />\r\n          <Field value={oldEntity.z} cart='z' onChangeCallback={(value) => setOldEntity({ ...oldEntity, z: Number(value) })} />\r\n          <Grid item xs= {12}>\r\n            <TextField\r\n\r\n              id=\"outlined-full-width\"\r\n              label=\"Paste Coords\"\r\n              onChange={parsePaste}\r\n              placeholder=\"Paste at least 3 numbers separated by whitespace or non numeric characters\"\r\n              helperText=\"Paste parseable xyz coords\"\r\n              fullWidth\r\n              value={pasteInput}\r\n              margin=\"normal\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              variant=\"outlined\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs=\"auto\">\r\n          <FormControl  >\r\n            <InputLabel id=\"demo-simple-select-label\">Rotation?</InputLabel>\r\n            <Select\r\n\r\n              value={rotation}\r\n              onChange={event => setRotation(Number(event.target.value))}\r\n            >\r\n              <MenuItem value={0}>0</MenuItem>\r\n              <MenuItem value={90}>90</MenuItem>\r\n              <MenuItem value={180}>180</MenuItem>\r\n              <MenuItem value={270}>270</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        New Entity Coordinates\r\n        <Grid item xs={\"auto\"}>\r\n          <ROField value={finishedCoords.x} cart='X' />\r\n          <ROField value={finishedCoords.y} cart='y' />\r\n          <ROField value={finishedCoords.z} cart='z' />\r\n        </Grid>\r\n        {/*Copy to Clipboard\r\n         <Grid item xs=\"auto\">\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n\r\n            endIcon={<FileCopyIcon />}\r\n          >\r\n            {`\"x\" => ${finishedCoords.x}, \"y\" => ${finishedCoords.y}, \"z\" => ${finishedCoords.z}`}\r\n          </Button>\r\n        </Grid> */}\r\n\r\n        {/* <Field input={coords.originCoords.z} />\r\n      <Field input={coords.originCoords.y} /> */}\r\n\r\n\r\n      </Grid >\r\n\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'fontsource-roboto'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}